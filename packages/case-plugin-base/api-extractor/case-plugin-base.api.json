{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.1",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/case-contract-testing/contract-case/tree/main/packages/case-plugin-base",
  "kind": "Package",
  "canonicalReference": "@contract-case/case-plugin-base!",
  "docComment": "",
  "name": "@contract-case/case-plugin-base",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@contract-case/case-plugin-base!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!actualToString:function(1)",
          "docComment": "/**\n * Converts actual data into a string, for printing\n *\n * @param actual - the actual data that ContractCase encountered\n *\n * @param indent - how many spaces to indent this string\n *\n * @returns a printable string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "actualToString: <T>(actual: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", indent?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/matchers/renderActual.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "actual",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "indent",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "actualToString"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!addLocation:function(1)",
          "docComment": "/**\n * Adds the current location to the context\n *\n * @param location - a string representing the current location. Prefix with `:` if this location should only be printed during maintainer debugging\n *\n * @param context - the current {@link MatchContext}\n *\n * @returns a new {@link MatchContext} with updated location.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "addLocation: (location: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            }
          ],
          "fileUrlPath": "src/context/context.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "location",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "addLocation"
        },
        {
          "kind": "Class",
          "canonicalReference": "@contract-case/case-plugin-base!CaseConfigurationError:class",
          "docComment": "/**\n * Indicates that the user has configured ContractCase incorrectly.\n *\n * Throw this during mock setup if you encounter configuration errors.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CaseConfigurationError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/errors/CaseConfigurationError.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "CaseConfigurationError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@contract-case/case-plugin-base!CaseConfigurationError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CaseConfigurationError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", context?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogLevelContext",
                  "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@contract-case/case-plugin-base!CaseCoreError:class",
          "docComment": "/**\n * Something went wrong in ContractCase internals.\n *\n * @remarks\n *\n * Use this when there is almost certainly a bug in the implementation of the contract case core or your plugin.\n *\n * If used during a plugin execution, please include the plugin name / bug reporting instructions in the message.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CaseCoreError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/errors/CaseCoreError.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "CaseCoreError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@contract-case/case-plugin-base!CaseCoreError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CaseCoreError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", context?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogLevelContext",
                  "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!CaseError:type",
          "docComment": "/**\n * Union of all error data types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CaseError = "
            },
            {
              "kind": "Reference",
              "text": "MatchingError",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ConfigurationError",
              "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TriggerError",
              "canonicalReference": "@contract-case/case-plugin-base!TriggerError:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "VerificationError",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RawMatchError",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "CaseError",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!CaseExample:type",
          "docComment": "/**\n * All states of Examples.\n *\n * This isn't really part of the plugin interface; it's only here because the ResultPrinter needs it.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CaseExample = "
            },
            {
              "kind": "Reference",
              "text": "SuccessfulCaseExample",
              "canonicalReference": "@contract-case/case-plugin-base!~SuccessfulCaseExample:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "FailedCaseExample",
              "canonicalReference": "@contract-case/case-plugin-base!~FailedCaseExample:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PendingCaseExample",
              "canonicalReference": "@contract-case/case-plugin-base!~PendingCaseExample:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/contract.types.ts",
          "releaseTag": "Public",
          "name": "CaseExample",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@contract-case/case-plugin-base!CaseFailedAssertionError:class",
          "docComment": "/**\n * This is thrown by ContractCase core when expectations set up in the test were not met.\n *\n * If implementing a plugin, do not throw this during a matcher execution, instead return a {@link MatchResult} that contains the appropriate error.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CaseFailedAssertionError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/errors/CaseFailedAssertionError.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "CaseFailedAssertionError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@contract-case/case-plugin-base!CaseFailedAssertionError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CaseFailedAssertionError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(matchResult: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchResult",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matchResult",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@contract-case/case-plugin-base!CaseFailedAssertionError#matchResult:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "matchResult: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchResult",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "matchResult",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!CaseMatcherFor:type",
          "docComment": "/**\n * Helper type to extract a case matcher descriptor out of a list of descriptors\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CaseMatcherFor<KnownMatcherDescriptors, T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<KnownMatcherDescriptors, "
            },
            {
              "kind": "Reference",
              "text": "IsCaseNodeForType",
              "canonicalReference": "@contract-case/case-plugin-base!IsCaseNodeForType:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/utility.types.ts",
          "releaseTag": "Public",
          "name": "CaseMatcherFor",
          "typeParameters": [
            {
              "typeParameterName": "KnownMatcherDescriptors",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@contract-case/case-plugin-base!CaseTriggerError:class",
          "docComment": "/**\n * This is thrown by ContractCase core to indicate that the user-provided trigger failed when we weren't expecting it to.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CaseTriggerError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/errors/CaseTriggerError.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "CaseTriggerError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@contract-case/case-plugin-base!CaseTriggerError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CaseTriggerError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", context?: "
                },
                {
                  "kind": "Reference",
                  "text": "LogLevelContext",
                  "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!CheckMatchFn:type",
          "docComment": "/**\n * Checks a matcher against some actual data and returns a Promise containing a MatchResult.\n *\n * For checks beyond this matcher, use {@link MatchContext#descendAndCheck} to descend into any children.\n *\n * @remarks\n *\n * This function must have no side effects. It may be called repeatedly on the same data by ContractCase during a run.\n *\n * It must not modify the matcher descriptor during a run, but you may generate alternate matcher descriptors when you call the descend methods on the context.\n *\n * Note that calling check and strip together must always return no errors:\n * ```\n * yourMatcher.check(\n *   descriptor,\n *   context,\n *   yourMatcher.strip(descriptor)\n * ) // must be a `MatchResult` with no errors\n * ```\n *\n * @param matcher - the matcher descriptor\n *\n * @param matchContext - the {@link MatchContext} for this run\n *\n * @param actual - the actual data to check against\n *\n * @typeParam T - a matcher descriptor\n *\n * @returns either a Promise containing a {@link MatchResult} or a raw {@link MatchResult}. The Promise return type is preferred.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CheckMatchFn<T> = "
            },
            {
              "kind": "Content",
              "text": "(matcher: T, matchContext: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ", actual: unknown) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/executors.types.ts",
          "releaseTag": "Public",
          "name": "CheckMatchFn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!combineResultPromises:function(1)",
          "docComment": "/**\n * Combines multiple {@link MatchResult} objects / Promises containing match results.\n *\n * @param results - MatchResult or `Promise<MatchResult>` objects\n *\n * @returns a Promise containing the combined Match Results.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "combineResultPromises: (...results: "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": ">)[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "fileUrlPath": "src/matchers/results/results.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "results",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "combineResultPromises"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!combineResults:function(1)",
          "docComment": "/**\n * Combines multiple {@link MatchResult} objects into one match result object\n *\n * @deprecated\n *\n * Prefer {@link combineResultPromises}\n *\n * @param results - MatchResult or `Promise<MatchResult>` objects\n *\n * @returns combined Match Results.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "combineResults: (...results: "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            }
          ],
          "fileUrlPath": "src/matchers/results/results.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "results",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "combineResults"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError:interface",
          "docComment": "/**\n * The data for a user configuration error.\n *\n * Don't create this directly, use `configurationError` to create one.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConfigurationError "
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "ConfigurationError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError#code:member",
              "docComment": "/**\n * The error code that is associated with this configuration error This should be a unique code specific to this kind of error that users could look up in the documentation for more information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError#location:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "location: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "location",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError#toString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString: "
                },
                {
                  "kind": "Content",
                  "text": "() => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ConfigurationError#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ERROR_TYPE_CONFIGURATION",
                  "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_CONFIGURATION:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!ContractCasePlugin:type",
          "docComment": "/**\n * Represents a plugin for the ContractCase contract testing framework. A plugin can defines custom matchers or mock setups for testing different cases.\n *\n * @typeParam MatcherTypes - A union type of string constants for the matcher types supported by the plugin.\n *\n * @typeParam MockTypes - A union type of string constants for the mocks types supported by the plugin.\n *\n * @typeParam MatcherDescriptors - A union type of all matcher descriptor objects for the matchers supplied by this plugin.\n *\n * @typeParam MockDescriptors - T A union type of all mock descriptor objects for the mocks supplied by this plugin\n *\n * @typeParam AllSetupInfo - A union type representing the setup information required for all mocks supplied by this plugin.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ContractCasePlugin<MatcherTypes extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", MockTypes extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", MatcherDescriptors extends "
            },
            {
              "kind": "Reference",
              "text": "IsCaseNodeForType",
              "canonicalReference": "@contract-case/case-plugin-base!IsCaseNodeForType:interface"
            },
            {
              "kind": "Content",
              "text": "<MatcherTypes>"
            },
            {
              "kind": "Content",
              "text": ", MockDescriptors extends "
            },
            {
              "kind": "Reference",
              "text": "AnyMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyMockDescriptor:type"
            },
            {
              "kind": "Content",
              "text": ", AllSetupInfo> = "
            },
            {
              "kind": "Content",
              "text": "{\n    description: "
            },
            {
              "kind": "Reference",
              "text": "PluginDescription",
              "canonicalReference": "@contract-case/case-plugin-base!PluginDescription:type"
            },
            {
              "kind": "Content",
              "text": ";\n    matcherExecutors: {\n        [T in MatcherTypes]: "
            },
            {
              "kind": "Reference",
              "text": "MatcherExecutor",
              "canonicalReference": "@contract-case/case-plugin-base!MatcherExecutor:interface"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "CaseMatcherFor",
              "canonicalReference": "@contract-case/case-plugin-base!CaseMatcherFor:type"
            },
            {
              "kind": "Content",
              "text": "<MatcherDescriptors, T>>;\n    };\n    setupMocks: {\n        [T in MockTypes]: "
            },
            {
              "kind": "Reference",
              "text": "MockExecutorFn",
              "canonicalReference": "@contract-case/case-plugin-base!MockExecutorFn:type"
            },
            {
              "kind": "Content",
              "text": "<MockDescriptors, AllSetupInfo, T>;\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "ContractCasePlugin",
          "typeParameters": [
            {
              "typeParameterName": "MatcherTypes",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "MockTypes",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "MatcherDescriptors",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "MockDescriptors",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "AllSetupInfo",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 10,
            "endIndex": 19
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns:interface",
          "docComment": "/**\n * The part of the context that allows saving or looking up data bound to a specific context and contract\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ContractLookupFns "
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "ContractLookupFns",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns#addDefaultVariable:member",
              "docComment": "/**\n * Adds a default variable to the *contract* (not the context). Primarily used by the state handler setup code.\n *\n * It is unlikely that plugins will need to call this code.\n *\n * Note that this function modifies the contract.\n *\n * @param matcher - the matcher to save.\n *\n * @returns the cached matcher\n *\n * @throws\n *\n * CaseConfigurationError if there is no matcher defined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addDefaultVariable: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string, stateName: string, value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ") => [name: string, value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "addDefaultVariable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns#addStateVariable:member",
              "docComment": "/**\n * This function adds a state variable to the *contract*. Primarily used by the state handler setup code.\n *\n * It is unlikely that plugins will need to call this function.\n *\n * @param matcher - the matcher to save.\n *\n * @returns the cached matcher\n *\n * @throws\n *\n * CaseConfigurationError if there is no matcher defined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addStateVariable: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string, stateName: string, value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ") => [name: string, value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "addStateVariable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns#invokeFunctionByHandle:member",
              "docComment": "/**\n * Convenience function so that mock executions can call out to user provided functions.\n *\n * Primarily used by the Function plugin, but may have other uses.\n *\n * @param handle - the handle to the function (must have been previously registered)\n *\n * @param callerArguments - the arguments to pass to the function (as an array)\n *\n * @returns a promise that is the result of the call, or a CaseConfigurationError if the function invocation failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invokeFunctionByHandle: "
                },
                {
                  "kind": "Content",
                  "text": "(handle: string, callerArguments: unknown[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "invokeFunctionByHandle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns#lookupMatcher:member",
              "docComment": "/**\n * Looks up a previously saved matcher by unique name\n *\n * @param uniqueName - the name the matcher was saved with\n *\n * @returns the cached matcher\n *\n * @throws\n *\n * CaseConfigurationError if there is no matcher defined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lookupMatcher: "
                },
                {
                  "kind": "Content",
                  "text": "(uniqueName: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lookupMatcher",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns#lookupVariable:member",
              "docComment": "/**\n * Get a previously saved state variable, either from state or from the default value.\n *\n * @param name - the name of the variable\n *\n * @returns the matcher (or data) for the variable.\n *\n * @throws\n *\n * CaseConfigurationError if the variable isn't set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lookupVariable: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lookupVariable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns#saveLookupableMatcher:member",
              "docComment": "/**\n * Saves a matcher by the unique description. The description is generated from the matcher, and may be overridden if the matcher has a uniqueName.\n *\n * @param matcher - the matcher to save.\n *\n * @returns the cached matcher\n *\n * @throws\n *\n * CaseConfigurationError if there is no matcher defined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "saveLookupableMatcher: "
                },
                {
                  "kind": "Content",
                  "text": "(matcher: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcher",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "saveLookupableMatcher",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!CORE_PLUGIN_PREFIX:var",
          "docComment": "/**\n * DO NOT USE THIS IN YOUR OWN PLUGINS\n *\n * @remarks\n *\n * The prefix for ContractCase core plugin names. Plugin names with this prefix are treated as always loaded, log less debug information, and any errors in loading are treated as core crashes rather than user configuration errors.\n *\n * Other than the way logs and load failures are treated, there's no special treatment given to core plugins,\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CORE_PLUGIN_PREFIX: "
            },
            {
              "kind": "Content",
              "text": "\"_CaseCore:\""
            }
          ],
          "fileUrlPath": "src/corePlugins.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CORE_PLUGIN_PREFIX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!coreLookupMatcher:function(1)",
          "docComment": "/**\n * Creates a matcher descriptor for a lookupable matcher.\n *\n * @remarks\n *\n * Useful if you want to automatically name lookupable matcher descriptors in your plugin.\n *\n * Note that lookup matchers must have identical contents when rendered.\n *\n * @param uniqueName - the name for this lookupable matcher\n *\n * @param child - the contents of this lookupable matcher\n *\n * @returns a {@link LookupableMatcher}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "coreLookupMatcher: (uniqueName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", child: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "LookupableMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!LookupableMatcher:interface"
            }
          ],
          "fileUrlPath": "src/matchers/lookup.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "uniqueName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "child",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "coreLookupMatcher"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!DataContext:type",
          "docComment": "/**\n * Convenience type for just the parts of the context that have data - everything in this type will be serialisable.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DataContext = "
            },
            {
              "kind": "Reference",
              "text": "DefaultContext",
              "canonicalReference": "@contract-case/case-plugin-base!DefaultContext:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "InjectableContext",
              "canonicalReference": "@contract-case/case-plugin-base!~InjectableContext:interface"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ContractFileConfig",
              "canonicalReference": "@contract-case/case-plugin-base!ContractFileConfig:interface"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "RunContext",
              "canonicalReference": "@contract-case/case-plugin-base!RunContext:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "LogLevelContext",
              "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "LogContext",
              "canonicalReference": "@contract-case/case-plugin-base!LogContext:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "DataContext",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!DefaultContext:type",
          "docComment": "/**\n * The settings that are set as default context for a run\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DefaultContext = "
            },
            {
              "kind": "Reference",
              "text": "LogLevelContext",
              "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    '_case:context:matchBy': typeof "
            },
            {
              "kind": "Reference",
              "text": "MATCH_BY_TYPE",
              "canonicalReference": "@contract-case/case-plugin-base!MATCH_BY_TYPE:var"
            },
            {
              "kind": "Content",
              "text": " | typeof "
            },
            {
              "kind": "Reference",
              "text": "MATCH_BY_EXACT",
              "canonicalReference": "@contract-case/case-plugin-base!MATCH_BY_EXACT:var"
            },
            {
              "kind": "Content",
              "text": ";\n    '_case:context:serialisableTo': typeof "
            },
            {
              "kind": "Reference",
              "text": "SERIALISABLE_TO_JSON",
              "canonicalReference": "@contract-case/case-plugin-base!SERIALISABLE_TO_JSON:var"
            },
            {
              "kind": "Content",
              "text": ";\n    '_case:currentRun:context:contractMode': 'write' | 'read';\n    '_case:currentRun:context:printResults': boolean;\n    '_case:currentRun:context:connectorClient': string;\n    '_case:currentRun:context:autoVersionFrom': 'TAG' | 'GIT_SHA';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "DefaultContext",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_CONFIGURATION:var",
          "docComment": "/**\n * Represents an error because of configuration during test execution\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ERROR_TYPE_CONFIGURATION: "
            },
            {
              "kind": "Content",
              "text": "\"CONFIGURATION_ERROR\""
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ERROR_TYPE_CONFIGURATION",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_MATCHING:var",
          "docComment": "/**\n * Represents an error from a matcher\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ERROR_TYPE_MATCHING: "
            },
            {
              "kind": "Content",
              "text": "\"MATCHING_ERROR\""
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ERROR_TYPE_MATCHING",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_RAW_MATCH:var",
          "docComment": "/**\n * Represents an error that would be from a matcher, but there's no physical matcher\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ERROR_TYPE_RAW_MATCH: "
            },
            {
              "kind": "Content",
              "text": "\"RAW_MATCH_ERROR\""
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ERROR_TYPE_RAW_MATCH",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_TEST_RESPONSE:var",
          "docComment": "/**\n * Represents an error during the testResponse or testErrorResponse function\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ERROR_TYPE_TEST_RESPONSE: "
            },
            {
              "kind": "Content",
              "text": "\"TEST_RESPONSE_ERROR\""
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ERROR_TYPE_TEST_RESPONSE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_TRIGGER:var",
          "docComment": "/**\n * Represents an error because of the user supplied trigger\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ERROR_TYPE_TRIGGER: "
            },
            {
              "kind": "Content",
              "text": "\"TRIGGER_FUNCTION_ERROR\""
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ERROR_TYPE_TRIGGER",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!errorWhen:function(1)",
          "docComment": "/**\n * Helper function that will return an error if the test condition is met, or a non-erroring {@link MatchResult} otherwise.\n *\n * @param test - a boolean condition\n *\n * @param err - either an error or an array of errors\n *\n * @returns a {@link MatchResult} containing the errors if `test` is true, or a passing {@link MatchResult} otherwise.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "errorWhen: (test: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", err: "
            },
            {
              "kind": "Reference",
              "text": "CaseError",
              "canonicalReference": "@contract-case/case-plugin-base!CaseError:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CaseError",
              "canonicalReference": "@contract-case/case-plugin-base!CaseError:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            }
          ],
          "fileUrlPath": "src/matchers/results/errors.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "test",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "err",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "errorWhen"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!getPluginConfig:function(1)",
          "docComment": "/**\n * Gets the plugin configuration (the mockConfig object keyed by your plugin short name) for the given plugin. This function validates the context and throws {@link CaseConfigurationError} if the mockConfig object is not set or the key is missing. You don't need to catch this exception, you can let it bubble up to the framework for it to be rendered to the user.\n *\n * This function doesn't know the expected shape of your configuration object; it's up to you to then validate the object has the appropriate fields set to valid values.\n *\n * @param context - the current {@link MatchContext}\n *\n * @param pluginShortName - the short name for the currently executing plugin\n *\n * @returns the value of `mockConfig[pluginShortName]`\n *\n * @throws\n *\n * CaseConfigurationError if the expected configuration keys are not set, or are set but not defined.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getPluginConfig: (context: "
            },
            {
              "kind": "Reference",
              "text": "DataContext",
              "canonicalReference": "@contract-case/case-plugin-base!DataContext:type"
            },
            {
              "kind": "Content",
              "text": ", description: "
            },
            {
              "kind": "Reference",
              "text": "PluginDescription",
              "canonicalReference": "@contract-case/case-plugin-base!PluginDescription:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            }
          ],
          "fileUrlPath": "src/context/pluginConfig.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "description",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPluginConfig"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!hasErrors:function(1)",
          "docComment": "/**\n * Tests whether a given {@link MatchResult} object has any errors.\n *\n * @param result - a {@link MatchResult} object\n *\n * @returns true if `result` has any errors\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hasErrors: (result: "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CaseError",
              "canonicalReference": "@contract-case/case-plugin-base!CaseError:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/matchers/results/results.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "result",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "hasErrors"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!HasExample:type",
          "docComment": "/**\n * A matcher descriptor that has an example\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type HasExample<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T & {\n    '_case:matcher:example': unknown;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/utility.types.ts",
          "releaseTag": "Public",
          "name": "HasExample",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!hasNoErrors:function(1)",
          "docComment": "/**\n * Tests whether a given {@link MatchResult} object has no errors.\n *\n * @param result - a {@link MatchResult} object\n *\n * @returns true if `result` has no errors (ie, is a passing {@link MatchResult})\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hasNoErrors: (result: "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/matchers/results/results.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "result",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasNoErrors"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!isCaseNode:function(1)",
          "docComment": "/**\n * Type guard to determine if an object is a ContractCase matcher descriptor or not\n *\n * @param maybeMatcher - a matcher or data\n *\n * @returns true if `maybeMatcher` is a matcher descriptor, false if not\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isCaseNode: (maybeMatcher: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "maybeMatcher",
              "canonicalReference": "@contract-case/case-plugin-base!~maybeMatcher"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
            }
          ],
          "fileUrlPath": "src/matchers/guards.types.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "maybeMatcher",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isCaseNode"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!IsCaseNodeForType:interface",
          "docComment": "/**\n * The base type for a case matcher descriptor that has this string constant\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IsCaseNodeForType<T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/matchers/utility.types.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IsCaseNodeForType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!IsCaseNodeForType#\"_case:matcher:type\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:matcher:type': "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:matcher:type\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!LogContext:interface",
          "docComment": "/**\n * Part of the context with the logger attached. Useful if you just want to pass the logging functions to something. This is used in a few places where the whole context isn't available (eg, before the context has been constructed).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LogContext "
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "LogContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!LogContext#logger:member",
              "docComment": "/**\n * Current logger\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logger: "
                },
                {
                  "kind": "Reference",
                  "text": "Logger",
                  "canonicalReference": "@contract-case/case-plugin-base!Logger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!LogContext#makeLogger:member",
              "docComment": "/**\n * Constructor for making the logger when moving to different locations (should not be called by plugins)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "makeLogger: "
                },
                {
                  "kind": "Content",
                  "text": "(m: "
                },
                {
                  "kind": "Reference",
                  "text": "LogLevelContext",
                  "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Logger",
                  "canonicalReference": "@contract-case/case-plugin-base!Logger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "makeLogger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!LogContext#resultPrinter:member",
              "docComment": "/**\n * Used for printing results (should not be called by plugins)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resultPrinter: "
                },
                {
                  "kind": "Reference",
                  "text": "ResultFormatter",
                  "canonicalReference": "@contract-case/case-plugin-base!ResultFormatter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resultPrinter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!Logger:interface",
          "docComment": "/**\n * Describes the logger object\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Logger "
            }
          ],
          "fileUrlPath": "src/logger/types.ts",
          "releaseTag": "Public",
          "name": "Logger",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!Logger#debug:member",
              "docComment": "/**\n * Information to help users find out what is happening during their tests\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string, ...additional: unknown[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!Logger#deepMaintainerDebug:member",
              "docComment": "/**\n * Like maintainerDebug, but much deeper - including eg detailled matching docs, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deepMaintainerDebug: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string, ...additional: unknown[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deepMaintainerDebug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!Logger#error:member",
              "docComment": "/**\n * Something has gone wrong during the execution of the test framework\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string, ...additional: unknown[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!Logger#maintainerDebug:member",
              "docComment": "/**\n * Information to help maintainers debug what is happening in the test framework\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maintainerDebug: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string, ...additional: unknown[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maintainerDebug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!Logger#warn:member",
              "docComment": "/**\n * It seems likely that there is a misconfiguration\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warn: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string, ...additional: unknown[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "warn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!LogLevel:type",
          "docComment": "/**\n * The log levels available\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogLevel = "
            },
            {
              "kind": "Content",
              "text": "'none' | 'error' | 'warn' | 'debug' | 'maintainerDebug' | 'deepMaintainerDebug'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/logger/types.ts",
          "releaseTag": "Public",
          "name": "LogLevel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!LogLevelContext:type",
          "docComment": "/**\n * LogLevelContext is the subset of the overall context object that's needed for logging. It exists so that it's possible to call log and error related functions no matter what context you're in.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogLevelContext = "
            },
            {
              "kind": "Content",
              "text": "{\n    '_case:currentRun:context:parentVersions': "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<string>;\n    '_case:currentRun:context:logLevel': "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "@contract-case/case-plugin-base!LogLevel:type"
            },
            {
              "kind": "Content",
              "text": ";\n    '_case:currentRun:context:location': "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<string>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "LogLevelContext",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!makeNoErrorResult:function(1)",
          "docComment": "/**\n * Makes a passing {@link MatchResult} object.\n *\n * @returns a {@link MatchResult} object that has no errors.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "makeNoErrorResult: () => "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            }
          ],
          "fileUrlPath": "src/matchers/results/results.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "makeNoErrorResult"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!makeResults:function(1)",
          "docComment": "/**\n * Makes a {@link MatchResult} object.\n *\n * @param err - any {@link CaseError} objects. If none supplied, then it makes a passing {@link MatchResult} object\n *\n * @returns a {@link MatchResult} object.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "makeResults: (...err: "
            },
            {
              "kind": "Reference",
              "text": "CaseError",
              "canonicalReference": "@contract-case/case-plugin-base!CaseError:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
            }
          ],
          "fileUrlPath": "src/matchers/results/results.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "err",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "makeResults"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!MATCH_BY_EXACT:var",
          "docComment": "/**\n * Indicates that we are doing an exact values match in this context\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MATCH_BY_EXACT: "
            },
            {
              "kind": "Content",
              "text": "\"exact\""
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MATCH_BY_EXACT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!MATCH_BY_TYPE:var",
          "docComment": "/**\n * Indicates that we are doing a general shape match in this context\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MATCH_BY_TYPE: "
            },
            {
              "kind": "Content",
              "text": "\"type\""
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MATCH_BY_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type",
          "docComment": "/**\n * The part of the context used during a matching run - contains traversal functions and any lookup functions that arbitrary matchers or mocks might need.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MatchContext = "
            },
            {
              "kind": "Reference",
              "text": "DataContext",
              "canonicalReference": "@contract-case/case-plugin-base!DataContext:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TraversalFns",
              "canonicalReference": "@contract-case/case-plugin-base!TraversalFns:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ContractLookupFns",
              "canonicalReference": "@contract-case/case-plugin-base!ContractLookupFns:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "HasMakeLookupFn",
              "canonicalReference": "@contract-case/case-plugin-base!~HasMakeLookupFn:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "MatchContext",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!MatchContextByExact:interface",
          "docComment": "/**\n * If the context is assignable to this type, it indicates that the matchers should default to exact matching\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MatchContextByExact "
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "MatchContextByExact",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContextByExact#\"_case:context:matchBy\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:context:matchBy': "
                },
                {
                  "kind": "Content",
                  "text": "'exact'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:context:matchBy\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!MatchContextByType:interface",
          "docComment": "/**\n * If the context is assignable to this type, it indicates that the matchers should default to shape (ie, type) matching\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MatchContextByType "
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "MatchContextByType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContextByType#\"_case:context:matchBy\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:context:matchBy': "
                },
                {
                  "kind": "Content",
                  "text": "'type'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:context:matchBy\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!MatcherExecutor:interface",
          "docComment": "/**\n * A MatcherExecutor contains the three functions needed to execute a matcher descriptor during a run.\n *\n * @remarks\n *\n * All functions must have no side effects.\n *\n * See the individual function types for more details.\n *\n * @typeParam matcherType - the string constant for this matcher descriptor\n *\n * @typeParam T - the matcher descriptor object type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MatcherExecutor<MatcherType extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Reference",
              "text": "IsCaseNodeForType",
              "canonicalReference": "@contract-case/case-plugin-base!IsCaseNodeForType:interface"
            },
            {
              "kind": "Content",
              "text": "<MatcherType>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/matchers/executors.types.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "MatcherType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "MatcherExecutor",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatcherExecutor#check:member",
              "docComment": "/**\n * Checks the matcher against some actual data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "check: "
                },
                {
                  "kind": "Reference",
                  "text": "CheckMatchFn",
                  "canonicalReference": "@contract-case/case-plugin-base!CheckMatchFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "check",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatcherExecutor#describe:member",
              "docComment": "/**\n * Describes the matcher descriptor in english\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "describe: "
                },
                {
                  "kind": "Reference",
                  "text": "NameMatcherFn",
                  "canonicalReference": "@contract-case/case-plugin-base!NameMatcherFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "describe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatcherExecutor#strip:member",
              "docComment": "/**\n * Strips the matchers from this descriptor, returning example data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strip: "
                },
                {
                  "kind": "Reference",
                  "text": "StripMatcherFn",
                  "canonicalReference": "@contract-case/case-plugin-base!StripMatcherFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatcherExecutor#validate:member",
              "docComment": "/**\n * Validate the configured arguments of this matcher\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validate: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidateMatcherFn",
                  "canonicalReference": "@contract-case/case-plugin-base!ValidateMatcherFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "validate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!matcherToString:function(1)",
          "docComment": "/**\n * Converts a matcher or data into a human friendly string for printing\n *\n * @remarks\n *\n * This is currently the same implementation as {@link actualToString}\n *\n * TODO: Add a better implementation that walks the tree and prints something like the DSL does for easy readability\n *\n * @param actual - the matcher descriptor\n *\n * @param indent - how many spaces to indent this string\n *\n * @returns a printable string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "matcherToString: <T>(actual: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", indent?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/matchers/renderActual.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "actual",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "indent",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "matcherToString"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!matchingError:function(1)",
          "docComment": "/**\n * Creates a mismatched matcher expectations error\n *\n * @param matcher - The matcher that generated this error\n *\n * @param message - The message that describes this error\n *\n * @param actual - The actual value that was received\n *\n * @param context - The match context this occurred in\n *\n * @param expected - An optional expected value (might be a description of what was expected)\n *\n * @returns CaseError\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "matchingError: (matcher: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
            },
            {
              "kind": "Content",
              "text": ", message: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", actual: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ", expected?: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "CaseError",
              "canonicalReference": "@contract-case/case-plugin-base!CaseError:type"
            }
          ],
          "fileUrlPath": "src/matchers/results/errors.ts",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "matcher",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "actual",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "expected",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "matchingError"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!MatchingError:interface",
          "docComment": "/**\n * Describes the data of an error encountered during a matcher execution. Don't create these manually, use `matchingError` to create them.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MatchingError "
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "MatchingError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#actual:member",
              "docComment": "/**\n * The actual data that was encountered (could be an english description, or the raw expected data. Prefer raw data if possible)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actual: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "actual",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#expected:member",
              "docComment": "/**\n * What data was expected (could be an english description, or the raw expected data. Prefer raw data if possible)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expected: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "expected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#location:member",
              "docComment": "/**\n * The ContractCase run location array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "location: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "location",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#matcher:member",
              "docComment": "/**\n * The matcher descriptor that emitted this error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "matcher: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcher",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "matcher",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#message:member",
              "docComment": "/**\n * A human readable message for this error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#toString:member",
              "docComment": "/**\n * A helper to make it easy to print these errors during debugging\n *\n * @returns A combination of the location and error messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString: "
                },
                {
                  "kind": "Content",
                  "text": "() => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!MatchingError#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ERROR_TYPE_MATCHING",
                  "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_MATCHING:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type",
          "docComment": "/**\n * Describes the result of calling a matcher executor. If there are no errors, the array should be empty.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MatchResult = "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CaseError",
              "canonicalReference": "@contract-case/case-plugin-base!CaseError:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "MatchResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!MockData:type",
          "docComment": "/**\n * Represents the data produced by an invocation of a mock, ready for assertion.\n *\n * @typeParam AllSetupInfo - All known SetupInfo objects\n *\n * @typeParam T - the type of the mock descriptor that this data is for\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MockData<AllSetupInfo, T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    config: "
            },
            {
              "kind": "Reference",
              "text": "SetupInfoFor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!SetupInfoFor:type"
            },
            {
              "kind": "Content",
              "text": "<AllSetupInfo, T>;\n    assertableData: () => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MockOutput",
              "canonicalReference": "@contract-case/case-plugin-base!MockOutput:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/executors.types.ts",
          "releaseTag": "Public",
          "name": "MockData",
          "typeParameters": [
            {
              "typeParameterName": "AllSetupInfo",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!MockExecutorFn:type",
          "docComment": "/**\n * A function that will set up and run a mock.\n *\n * During the execution of this function, you should validate the mock descriptor is correctly formed, and any configuration properties on the context that your plugin requires are present and correctly formed.\n *\n * Additionally, any listeners (eg http servers) that the mock requires should be\n *\n * @param mock - The mock descriptor object that the user provides\n *\n * @param context - The {@link MatchContext} object for this run\n *\n * @typeParam AllMockDescriptors - All known MockDescriptor objects\n *\n * @typeParam AllSetupInfo - All known SetupInfo objects\n *\n * @typeParam T - the type of the mock descriptor that this function consumes\n *\n * @returns - a Promise of the {@link MockData} resulting from this execution\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MockExecutorFn<AllMockDescriptors extends "
            },
            {
              "kind": "Reference",
              "text": "AnyMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyMockDescriptor:type"
            },
            {
              "kind": "Content",
              "text": ", AllSetupInfo, T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(mock: "
            },
            {
              "kind": "Reference",
              "text": "CaseMockDescriptorFor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!CaseMockDescriptorFor:type"
            },
            {
              "kind": "Content",
              "text": "<AllMockDescriptors, T>, context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MockData",
              "canonicalReference": "@contract-case/case-plugin-base!MockData:type"
            },
            {
              "kind": "Content",
              "text": "<AllSetupInfo, T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/executors.types.ts",
          "releaseTag": "Public",
          "name": "MockExecutorFn",
          "typeParameters": [
            {
              "typeParameterName": "AllMockDescriptors",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "AllSetupInfo",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!MockOutput:type",
          "docComment": "/**\n * Represents the output state of a mock's execution, including what was expected.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MockOutput = "
            },
            {
              "kind": "Content",
              "text": "{\n    actual: unknown;\n    expected: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ";\n    context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/executors.types.ts",
          "releaseTag": "Public",
          "name": "MockOutput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!mustResolveToNumber:function(1)",
          "docComment": "/**\n * During a matcher execution, this function can be called to ensure that the provided matcher resolves to number.\n *\n * @remarks\n *\n * Use it if you expect that it's not possible for the matcher to resolve to anything other than a number, as it throws a {@link CaseConfigurationError}.\n *\n * If you use this function during a `check` operation, then the `CaseConfigurationError` will ultimately become a `CaseCoreError`, because it's not supposed to be possible to throw exceptions from a `check`\n *\n * If you're using it in `check`, make sure you also call it in `validate`.\n *\n * @param matcher - any matcher descriptor or data object\n *\n * @param context - the current {@link MatchContext}\n *\n * @returns the number value that the matcher resolves to\n *\n * @throws\n *\n * a {@link CaseConfigurationError} if the matcher doesn't resolve to a number.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "mustResolveToNumber: (matcher: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ", context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "src/matchers/resolve.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "matcher",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "mustResolveToNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!mustResolveToString:function(1)",
          "docComment": "/**\n * During a matcher execution, this function can be called to ensure that the provided matcher resolves to a string when stripped with `stripMatchers`.\n *\n * @remarks\n *\n * Use it if you expect that it's not possible for the matcher to resolve to anything other than a string, as it throws a {@link CaseConfigurationError}.\n *\n * If you use this function during a `check` operation, then the `CaseConfigurationError` will ultimately become a `CaseCoreError`, because it's not supposed to be possible to throw exceptions from a `check`\n *\n * If you're using it in `check`, make sure you also call it in `validate`.\n *\n * @param matcher - any matcher descriptor or data object\n *\n * @param context - the current {@link MatchContext}\n *\n * @returns the string value that the matcher resolves to\n *\n * @throws\n *\n * a {@link CaseConfigurationError} if the matcher doesn't resolve to a string.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "mustResolveToString: (matcher: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ", context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/matchers/resolve.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "matcher",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "mustResolveToString"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!NameMatcherFn:type",
          "docComment": "/**\n * Extracts the name for this matcher in an English, human readable format.\n *\n * @remarks\n *\n * CAUTION: Any two matchers that produce the same string MUST have the exact same matching behaviour in all cases. The core relies on this property.\n *\n * This function must have no side effects, it may be called repeatedly on the same data by ContractCase during a run.\n *\n * @param matcher - the matcher descriptor\n *\n * @param matchContext - the {@link MatchContext} for this run\n *\n * @typeParam T - a matcher descriptor\n *\n * @returns the raw example data\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NameMatcherFn<T> = "
            },
            {
              "kind": "Content",
              "text": "(matcher: T, matchContext: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/executors.types.ts",
          "releaseTag": "Public",
          "name": "NameMatcherFn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-base!nameMock:function(1)",
          "docComment": "/**\n * Helper function that will name this mock if it isn't already named.\n *\n * @remarks\n *\n * You probably don't need to use this function, it is used by ContractCase internals. TODO: it could be moved to the core.\n *\n * @param mock - a Mock Descriptor object\n *\n * @param context - the {@link MatchContext} for this run\n *\n * @returns a mock descriptor object where the request and response are guaranteed to be named.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "nameMock: <M extends "
            },
            {
              "kind": "Reference",
              "text": "AnyMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyMockDescriptor:type"
            },
            {
              "kind": "Content",
              "text": ">(mock: "
            },
            {
              "kind": "Content",
              "text": "M"
            },
            {
              "kind": "Content",
              "text": ", context: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "M"
            }
          ],
          "fileUrlPath": "src/mocks/names.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mock",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "nameMock"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!PluginDescription:type",
          "docComment": "/**\n * Describes the plugin name and version\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PluginDescription = "
            },
            {
              "kind": "Content",
              "text": "{\n    humanReadableName: string;\n    shortName: string;\n    uniqueMachineName: string;\n    version: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "PluginDescription",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!RawMatchError:interface",
          "docComment": "/**\n * Describes the data of an error encountered during an execution, where an expectation of a mock couldn't be met (eg, expected a call when we didn't get one)\n *\n * Don't create these manually, use `failedExpectationError` to create them.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RawMatchError "
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "RawMatchError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#actual:member",
              "docComment": "/**\n * What actually happened (in most cases this will be an English string that describes the situation)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actual: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "actual",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#code:member",
              "docComment": "/**\n * The error code that is associated with this raw match. This should be a unique code specific to this kind of error that users could look up in the documentation for more information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#expected:member",
              "docComment": "/**\n * What we expected to happen (in most cases this will be an English string that describes the situation)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expected: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "expected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#location:member",
              "docComment": "/**\n * The ContractCase run location array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "location: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "location",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#message:member",
              "docComment": "/**\n * A human readable message for this error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#toString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString: "
                },
                {
                  "kind": "Content",
                  "text": "() => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!RawMatchError#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ERROR_TYPE_RAW_MATCH",
                  "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_RAW_MATCH:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-base!SERIALISABLE_TO_JSON:var",
          "docComment": "/**\n * Indicates that values must be serialisable to json\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SERIALISABLE_TO_JSON: "
            },
            {
              "kind": "Content",
              "text": "\"json\""
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SERIALISABLE_TO_JSON",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!StripMatcherFn:type",
          "docComment": "/**\n * Strips the matchers from a matcher descriptor to return the raw data represented by this matcher (ie, the example data).\n *\n * @remarks\n *\n * This function must have no side effects, it may be called repeatedly on the same data by ContractCase during a run.\n *\n * Note that calling check and strip together must always return no errors:\n * ```\n * yourMatcher.check(\n *   descriptor,\n *   context,\n *   yourMatcher.strip(descriptor)\n * ) // must be a `MatchResult` with no errors\n * ```\n *\n * @param matcher - the matcher descriptor\n *\n * @param matchContext - the {@link MatchContext} for this run\n *\n * @typeParam T - a matcher descriptor\n *\n * @returns the raw example data\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StripMatcherFn<T> = "
            },
            {
              "kind": "Content",
              "text": "(matcher: T, matchContext: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "AnyData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyData:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/executors.types.ts",
          "releaseTag": "Public",
          "name": "StripMatcherFn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@contract-case/case-plugin-base!StripUnsupportedError:class",
          "docComment": "/**\n * Tried to strip matchers from something that doesn't have an example\n *\n * Throw this during `matcher.strip` execution if `strip` has been called when the results can't be reconciled without an example.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StripUnsupportedError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/errors/StripUnsupportedError.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StripUnsupportedError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@contract-case/case-plugin-base!StripUnsupportedError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StripUnsupportedError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(matcher: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcher",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Reference",
                  "text": "DataContext",
                  "canonicalReference": "@contract-case/case-plugin-base!DataContext:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matcher",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!TraversalFns:interface",
          "docComment": "/**\n * Describes the traversals available at this point in the execution\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TraversalFns "
            }
          ],
          "fileUrlPath": "src/context/types.ts",
          "releaseTag": "Public",
          "name": "TraversalFns",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TraversalFns#descendAndCheck:member",
              "docComment": "/**\n * Descend into the provided matcher, checking the actual data against the next matcher.\n *\n * Call this on any children of your matcher. If your matcher has more than one child, call this function multiple times and combine the result with {@link combineResultPromises}\n *\n * @param matcherOrData - the next matcher to check\n *\n * @param parentMatchContext - the match context to pass to the matcher. You should construct one of these with {@link addLocation}\n *\n * @param actual - the actual data at this point\n *\n * @returns a Promise containing the match result. It's also valid to return a raw `MatchResult`, but implementations should prefer the Promise form, as the non-promise form will be removed in a future version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descendAndCheck: "
                },
                {
                  "kind": "Content",
                  "text": "<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ">(matcherOrData: T, parentMatchContext: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchContext",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
                },
                {
                  "kind": "Content",
                  "text": ", actual: unknown) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MatchResult",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "MatchResult",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "descendAndCheck",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TraversalFns#descendAndDescribe:member",
              "docComment": "/**\n * Descend into the provided matcher, describing the contents in English.\n *\n * The top level of this function can be called by users as a convenience. Additionally, it's called in some cases where ContractCase wants to uniquely identify a matcher.\n *\n * Call this on any children of your matcher. If your matcher has more than one child, call this function multiple times and combine the result in the appropriate place in the string you're returning\n *\n * @param matcherOrData - the next matcher to check\n *\n * @param parentMatchContext - the match context to pass to the matcher. You should construct one of these with {@link addLocation}\n *\n * @returns the example data represented by this matcher.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descendAndDescribe: "
                },
                {
                  "kind": "Content",
                  "text": "(matcherOrData: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ", parentMatchContext: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchContext",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
                },
                {
                  "kind": "Content",
                  "text": ") => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "descendAndDescribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TraversalFns#descendAndStrip:member",
              "docComment": "/**\n * Descend into the provided matcher, stripping the matchers from it so that just the raw data is returned.\n *\n * The top level of this function can be called by users as a convenience. Additionally, it is called during the pre-validation step where ContractCase confirms that the example provided actually passes the matcher(s).\n *\n * Call this on any children of your matcher. If your matcher has more than one child, call this function multiple times and combine the result appropriately.\n *\n * @param matcherOrData - the next matcher to check\n *\n * @param parentMatchContext - the match context to pass to the matcher. You should construct one of these with {@link addLocation}\n *\n * @returns the example data represented by this matcher.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descendAndStrip: "
                },
                {
                  "kind": "Content",
                  "text": "(matcherOrData: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ", parentMatchContext: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchContext",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "AnyData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyData:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "descendAndStrip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TraversalFns#descendAndValidate:member",
              "docComment": "/**\n * Descend into the provided matcher, validating the expectations it was configured with. The top level is called before executing an Example to confirm that the example is sane.\n *\n * Call this on any children of your matcher. If your matcher has more than one child, call this function multiple times and chain the promises together.\n *\n * @param matcherOrData - the next matcher to check\n *\n * @param parentMatchContext - the match context to pass to the matcher. You should construct one of these with {@link addLocation}\n *\n * @returns either a successful promise if everything validated correctly, or a promise containing a `CaseConfigurationError` if validation failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descendAndValidate: "
                },
                {
                  "kind": "Content",
                  "text": "<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ">(matcherOrData: T, parentMatchContext: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchContext",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "descendAndValidate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TraversalFns#selfVerify:member",
              "docComment": "/**\n * Descend into the provided matcher, confirming that the result of `descendAndStrip` would pass as actual data.\n *\n * The top level of this function is called during the pre-validation step. You probably don't need to call it directly.\n *\n * Call this on any children of your matcher. If your matcher has more than one child, call this function multiple times and combine the result in the appropriate place in the string you're returning\n *\n * @param matcherOrData - the next matcher to check\n *\n * @param parentMatchContext - the match context to pass to the matcher. You should construct one of these with {@link addLocation}\n *\n * @returns the example data represented by this matcher.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selfVerify: "
                },
                {
                  "kind": "Content",
                  "text": "(matcherOrData: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ", parentMatchContext: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchContext",
                  "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selfVerify",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!TriggerError:interface",
          "docComment": "/**\n * The data for an error during execution of a trigger function\n *\n * You shouldn't need to use this in most plugins, as the core will call it for you when necessary\n *\n * Don't create this directly, use `triggerError` to create one.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TriggerError "
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "TriggerError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TriggerError#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TriggerError#location:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "location: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "location",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TriggerError#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TriggerError#toString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString: "
                },
                {
                  "kind": "Content",
                  "text": "() => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!TriggerError#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ERROR_TYPE_TRIGGER",
                  "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_TRIGGER:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-base!ValidateMatcherFn:type",
          "docComment": "/**\n * Validates the parameters of this matcher. ContractCase does two kinds of validation:\n *\n * - It calls `validate(matcher)`, to confirm that the parameters are appropriately set (this function) - It calls `check(matcher,context, strip(matcher))`, to confirm that the user's example matches itself.\n *\n * Because of the second check, you generally don't need to validate structure in this function. Use cases for this validation function are where only a subset of values are valid. For example, the HTTP Status Code validation function will accept the string `\"200\"`, but not the string `\"The type system accepts this incorrect value\"`.\n *\n * Like the other matcher functions, use {@link MatchContext#descendAndValidate} to descend into any children.\n *\n * If any of the Matcher's properties fail validation, throw a CaseConfigurationError.\n *\n * @remarks\n *\n * This function must have no side effects, it may be called repeatedly on the same data by ContractCase during a run.\n * ```\n * yourMatcher.check(\n *   descriptor,\n *   context,\n *   yourMatcher.strip(descriptor)\n * ) // must be a `MatchResult` with no errors\n * ```\n *\n * @param matcher - the matcher descriptor\n *\n * @param matchContext - the {@link MatchContext} for this run\n *\n * @typeParam T - a matcher descriptor\n *\n * @returns a void `Promise`, rejected with `CaseConfigurationError` if the validation failed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ValidateMatcherFn<T> = "
            },
            {
              "kind": "Content",
              "text": "(matcher: T, matchContext: "
            },
            {
              "kind": "Reference",
              "text": "MatchContext",
              "canonicalReference": "@contract-case/case-plugin-base!MatchContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/executors.types.ts",
          "releaseTag": "Public",
          "name": "ValidateMatcherFn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-base!VerificationError:interface",
          "docComment": "/**\n * The data for an error during a testResponse or testErrorResponse function.\n *\n * You shouldn't need to use this in most plugins, as the core will call it for you.\n *\n * Don't create this directly, use `verificationError` to create one.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VerificationError "
            }
          ],
          "fileUrlPath": "src/matchers/errors.types.ts",
          "releaseTag": "Public",
          "name": "VerificationError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError#code:member",
              "docComment": "/**\n * The error code that is associated with this verification error This should be a unique code specific to this kind of error that users could look up in the documentation for more information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Reference",
                  "text": "VerifyTriggerReturnObjectError",
                  "canonicalReference": "@contract-case/case-plugin-base!VerifyTriggerReturnObjectError:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError#location:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "location: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "location",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError#toString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString: "
                },
                {
                  "kind": "Content",
                  "text": "() => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-base!VerificationError#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ERROR_TYPE_TEST_RESPONSE",
                  "canonicalReference": "@contract-case/case-plugin-base!ERROR_TYPE_TEST_RESPONSE:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@contract-case/case-plugin-base!VerifyTriggerReturnObjectError:class",
          "docComment": "/**\n * This is thrown by ContractCase core to indicate that the user-provided verification function failed\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VerifyTriggerReturnObjectError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/errors/VerifyTriggerReturnObjectError.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "VerifyTriggerReturnObjectError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@contract-case/case-plugin-base!VerifyTriggerReturnObjectError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `VerifyTriggerReturnObjectError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(cause: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "cause",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@contract-case/case-plugin-base!VerifyTriggerReturnObjectError#cause:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cause: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cause",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
