{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.1",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/case-contract-testing/contract-case/tree/main/packages/case-plugin-dsl-types",
  "kind": "Package",
  "canonicalReference": "@contract-case/case-plugin-dsl-types!",
  "docComment": "",
  "name": "@contract-case/case-plugin-dsl-types",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@contract-case/case-plugin-dsl-types!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface",
          "docComment": "/**\n * Base type for any matcher descriptor\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AnyCaseMatcher "
            }
          ],
          "fileUrlPath": "src/matchers/matchers.types.ts",
          "releaseTag": "Public",
          "name": "AnyCaseMatcher",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher#\"_case:matcher:type\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:matcher:type': "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:matcher:type\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type",
          "docComment": "/**\n * Any matcher descriptor or data\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyCaseMatcherOrData = "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AnyData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyData:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AnyLeafOrStructure",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyLeafOrStructure:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/matchers.types.ts",
          "releaseTag": "Public",
          "name": "AnyCaseMatcherOrData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyData:type",
          "docComment": "/**\n * Helper type to represent any raw json data\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyData = "
            },
            {
              "kind": "Reference",
              "text": "JsonSerialisablePrimitive",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~JsonSerialisablePrimitive:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JsonMap",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~JsonMap:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JsonArray",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~JsonArray:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/matchers.types.ts",
          "releaseTag": "Public",
          "name": "AnyData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyMockDescriptor:type",
          "docComment": "/**\n * Base type for mock descriptors\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyMockDescriptor = "
            },
            {
              "kind": "Content",
              "text": "{\n    '_case:mock:type': string;\n    '_case:run:context:setup': "
            },
            {
              "kind": "Reference",
              "text": "InternalContractCaseCoreSetup",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreSetup:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    request?: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    response?: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcher:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/nodes.types.ts",
          "releaseTag": "Public",
          "name": "AnyMockDescriptor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyState:type",
          "docComment": "/**\n * Union type of all currently known State types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyState = "
            },
            {
              "kind": "Reference",
              "text": "NameOnlyState",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!NameOnlyState:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StateWithVariables",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!StateWithVariables:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "releaseTag": "Public",
          "name": "AnyState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyStateType:type",
          "docComment": "/**\n * Union type of all currently known State identifier strings.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyStateType = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "SETUP_NAMED_STATE",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!SETUP_NAMED_STATE:var"
            },
            {
              "kind": "Content",
              "text": " | typeof "
            },
            {
              "kind": "Reference",
              "text": "SETUP_VARIABLE_STATE",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!SETUP_VARIABLE_STATE:var"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "releaseTag": "Public",
          "name": "AnyStateType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!BaseSetupInfo:type",
          "docComment": "/**\n * The base SetupInfo provided to all mock setup functions and triggers.\n *\n * @remarks\n *\n * All SetupInfo objects extend this type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BaseSetupInfo = "
            },
            {
              "kind": "Content",
              "text": "{\n    stateVariables: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "VariableValue",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~VariableValue:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    mock: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "VariableValue",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~VariableValue:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    functions: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, (...args: string[]) => string>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/setup.types.ts",
          "releaseTag": "Public",
          "name": "BaseSetupInfo",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!CaseMockDescriptorFor:type",
          "docComment": "/**\n * Helper type for extracting a mock descriptor from all the known mock descriptors\n *\n * @typeParam KnownMockDescriptors - All the mock descriptor objects known\n *\n * @typeParam T - The string constant for the mock descriptor that we're interested in\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CaseMockDescriptorFor<KnownMockDescriptors extends "
            },
            {
              "kind": "Reference",
              "text": "AnyMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyMockDescriptor:type"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<KnownMockDescriptors, "
            },
            {
              "kind": "Reference",
              "text": "HasTypeForMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForMockDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/nodes.types.ts",
          "releaseTag": "Public",
          "name": "CaseMockDescriptorFor",
          "typeParameters": [
            {
              "typeParameterName": "KnownMockDescriptors",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForMockDescriptor:interface",
          "docComment": "/**\n * Helper type for a contract case mock descriptor object. All mock descriptors must extend this for the string constant that they use\n *\n * @typeParam T - The string constant for the mock descriptor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HasTypeForMockDescriptor<T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/mocks/nodes.types.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "HasTypeForMockDescriptor",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForMockDescriptor#\"_case:mock:type\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:mock:type': "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:mock:type\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForState:type",
          "docComment": "/**\n * Helper type for extracting state types by their constant\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type HasTypeForState<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyStateType",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyStateType:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    '_case:state:type': T;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "releaseTag": "Public",
          "name": "HasTypeForState",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreBehaviour:interface",
          "docComment": "/**\n * Describes how contract case behaves with this type of mock.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InternalContractCaseCoreBehaviour "
            }
          ],
          "fileUrlPath": "src/mocks/nodes.types.ts",
          "releaseTag": "Public",
          "name": "InternalContractCaseCoreBehaviour",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreBehaviour#stateVariables:member",
              "docComment": "/**\n * Describes the source of state variables.\n *\n * * `'state'` - variables are provided by state handlers * `'default'` - variables are provided by the default in the state descriptor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateVariables: "
                },
                {
                  "kind": "Content",
                  "text": "'state' | 'default'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stateVariables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreBehaviour#triggers:member",
              "docComment": "/**\n * Describes whether the trigger functions for this mock are user `provided`, or whether ContractCase will use the default functions it `generated`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "triggers: "
                },
                {
                  "kind": "Content",
                  "text": "'provided' | 'generated'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "triggers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreBehaviour#type:member",
              "docComment": "/**\n * The constant type for the mock descriptor used to mock this behaviour\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreSetup:interface",
          "docComment": "/**\n * Controls the behaviour of the mock when writing or reading contracts with this type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InternalContractCaseCoreSetup "
            }
          ],
          "fileUrlPath": "src/mocks/nodes.types.ts",
          "releaseTag": "Public",
          "name": "InternalContractCaseCoreSetup",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreSetup#read:member",
              "docComment": "/**\n * Defines how the ContractCase core will behave when reading (ie, verifying) a Example of this type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "read: "
                },
                {
                  "kind": "Reference",
                  "text": "InternalContractCaseCoreBehaviour",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreBehaviour:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "read",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreSetup#write:member",
              "docComment": "/**\n * Defines how the ContractCase core will behave when writing (ie, defining) an Example of this type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write: "
                },
                {
                  "kind": "Reference",
                  "text": "InternalContractCaseCoreBehaviour",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!InternalContractCaseCoreBehaviour:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "write",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!isCaseMock:function(1)",
          "docComment": "/**\n * Determines if a given value is a valid mock descriptor.\n *\n * @remarks\n *\n * This function checks if the provided value is an object and contains the property '_case:mock:type', indicating that it is a valid mock descriptor.\n *\n * @param maybeMock - The value to be checked.\n *\n * @returns A boolean indicating whether the provided value is a valid mock descriptor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isCaseMock: (maybeMock: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "maybeMock",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~maybeMock"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "AnyMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyMockDescriptor:type"
            }
          ],
          "fileUrlPath": "src/mocks/nodes.types.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "maybeMock",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isCaseMock"
        },
        {
          "kind": "Function",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!isLookupableMatcher:function(1)",
          "docComment": "/**\n * Determines if a specific matcher or data is a lookupable matcher\n *\n * @param maybeMatcher - the matcher or data in question\n *\n * @returns true if `maybeMatcher` is a lookupable matcher, false otherwise\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isLookupableMatcher: (maybeMatcher: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "maybeMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!~maybeMatcher"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LookupableMatcher",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!LookupableMatcher:interface"
            }
          ],
          "fileUrlPath": "src/matchers/lookup.types.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "maybeMatcher",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isLookupableMatcher"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!JsonOrMatcherArray:type",
          "docComment": "/**\n * Any json array that might contain data or matchers\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JsonOrMatcherArray = "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/matchers.types.ts",
          "releaseTag": "Public",
          "name": "JsonOrMatcherArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!JsonOrMatcherMap:type",
          "docComment": "/**\n * Any json object that might contain data or matchers\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type JsonOrMatcherMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    [key: string]: "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/matchers.types.ts",
          "releaseTag": "Public",
          "name": "JsonOrMatcherMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!LookupableMatcher:interface",
          "docComment": "/**\n * The matcher descriptor for a lookupable matcher\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LookupableMatcher "
            }
          ],
          "fileUrlPath": "src/matchers/lookup.types.ts",
          "releaseTag": "Public",
          "name": "LookupableMatcher",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!LookupableMatcher#\"_case:matcher:child\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:matcher:child'?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyCaseMatcherOrData",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"_case:matcher:child\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!LookupableMatcher#\"_case:matcher:type\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:matcher:type': "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "LOOKUP_MATCHER_TYPE",
                  "canonicalReference": "@contract-case/case-plugin-dsl-types!LOOKUP_MATCHER_TYPE:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:matcher:type\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!LookupableMatcher#\"_case:matcher:uniqueName\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'_case:matcher:uniqueName': "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"_case:matcher:uniqueName\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!NameOnlyState:type",
          "docComment": "/**\n * Describes a state that only has a name and no other information\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type NameOnlyState = "
            },
            {
              "kind": "Reference",
              "text": "HasTypeForState",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForState:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "SETUP_NAMED_STATE",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!SETUP_NAMED_STATE:var"
            },
            {
              "kind": "Content",
              "text": "> & {\n    readonly stateName: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "releaseTag": "Public",
          "name": "NameOnlyState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!ResolvesTo:type",
          "docComment": "/**\n * Indicates that a matcher should always resolve to this type of value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ResolvesTo<T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    '_case:matcher:resolvesTo': T;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/matchers/matchers.types.ts",
          "releaseTag": "Public",
          "name": "ResolvesTo",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!SETUP_NAMED_STATE:var",
          "docComment": "/**\n * Type identifier constant for the built-in {@link NameOnlyState} type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SETUP_NAMED_STATE: "
            },
            {
              "kind": "Content",
              "text": "\"_case:NamedState\""
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SETUP_NAMED_STATE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!SETUP_VARIABLE_STATE:var",
          "docComment": "/**\n * Type identifier constant for the built-in {@link StateWithVariables} type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SETUP_VARIABLE_STATE: "
            },
            {
              "kind": "Content",
              "text": "\"_case:StateWithVariables\""
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SETUP_VARIABLE_STATE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!SetupInfoFor:type",
          "docComment": "/**\n * Helper type to extract a specific mock's SetupInfo object form all known SetupInfo objects\n *\n * @typeParam AllSetupInfo - All known SetupInfo objects\n *\n * @typeParam T - the type of the mock descriptor that you want to get the SetupInfo for.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetupInfoFor<AllSetupInfo, T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<AllSetupInfo, "
            },
            {
              "kind": "Reference",
              "text": "HasTypeForMockDescriptor",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForMockDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> & "
            },
            {
              "kind": "Reference",
              "text": "BaseSetupInfo",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!BaseSetupInfo:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/mocks/setup.types.ts",
          "releaseTag": "Public",
          "name": "SetupInfoFor",
          "typeParameters": [
            {
              "typeParameterName": "AllSetupInfo",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/case-plugin-dsl-types!StateWithVariables:type",
          "docComment": "/**\n * Describes a named state that also contains some variables. These variables can be returned by state handlers later.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StateWithVariables = "
            },
            {
              "kind": "Reference",
              "text": "HasTypeForState",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!HasTypeForState:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "SETUP_VARIABLE_STATE",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!SETUP_VARIABLE_STATE:var"
            },
            {
              "kind": "Content",
              "text": "> & {\n    readonly stateName: string;\n    readonly variables: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "AnyCaseMatcherOrData",
              "canonicalReference": "@contract-case/case-plugin-dsl-types!AnyCaseMatcherOrData:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/states/states.types.ts",
          "releaseTag": "Public",
          "name": "StateWithVariables",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        }
      ]
    }
  ]
}
