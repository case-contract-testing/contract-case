import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'java-library-distribution'
    id 'maven-publish'
    id 'org.jreleaser' version '1.18.0'
    id "com.google.protobuf" version "0.9.5"
    id "com.github.spotbugs" version "6.1.13"
}
group = 'io.contract-testing.contractcase'
version = "0.24.0" // x-release-please-version

sourceCompatibility = '17'

repositories {
    mavenLocal()
    mavenCentral()
}

tasks.withType(Javadoc).configureEach {
    exclude('io/contract_testing/contractcase/grpc')
    exclude('io/contract_testing/contractcase/internal')
    options.addStringOption('Xdoclint:-missing', '-quiet')
}

def caseCoreVersion = "0.24.0"
def grpcVersion = "1.73.0"
def protobufVersion = "3.25.2"

dependencies {
    api("io.contract-testing.contractcase:definitions:${caseCoreVersion}") {
        changing = true
    }
    implementation 'com.diogonunes:JColor:5.5.1'
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    compileOnly "com.google.protobuf:protoc:${protobufVersion}"
    compileOnly "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    implementation "io.grpc:grpc-core:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    implementation 'org.jetbrains:annotations:26.0.2'

    testImplementation 'com.google.protobuf:protobuf-gradle-plugin:0.9.5'

    // Execution of tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.1'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'

    // client implementation under test, in test.httpclient.implementation
    testImplementation 'org.apache.httpcomponents:fluent-hc:4.5.14'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events("failed", "standard_out", "standard_error")
        showStackTraces = true
        exceptionFormat = "full"
    }
}

javadoc {
    configure( options ) {
        tags(
                'apiNote:a:"API Note:"',
                'implSpec:a:"Implementation Requirements:"',
                'implNote:a:"Implementation Note:"'
        )
    }
}

spotbugs {
    onlyAnalyze = ['io.contract_testing.contractcase.*','io.contract_testing.contractcase.client.*', 'io.contract_testing.contractcase.client.server.*','io.contract_testing.contractcase.edge.*' ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.WARN)
    manifest {
        attributes(
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Implementation-Version': version,
                'Implementation-Title': 'ContractCase Java DSL, for defining and verifying contracts with ContractCase',
                'Specification-Title': 'ContractCase Java DSL, for defining and verifying contracts with ContractCase',
                'Specification-Version': version,
        )
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForContractcasePublication }
        rename { it.replace('pom-default.xml', 'pom.xml') }
    }
}

sourceSets {
    main {
        java {}
    }
}

protobuf {
    plugins {
        // Locate a plugin with name 'grpc'. This step is optional.
        // If you leave it empty, it uses the current directory.
        // If you don't specify it, protoc will try to use "protoc-gen-grpc" from
        // system search path.
        'grpc' {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    protoc {
        // Download from repositories
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.builtins {
                java {}
            }
            task.plugins {
                grpc {
                    outputSubDir = 'grpcjava'
                }
            }
        }
    }
}


java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}


publishing {
    publications {
        contractcase(MavenPublication) {
            groupId = 'io.contract-testing.contractcase'
            artifactId = 'contract-case'
            version = version
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'contract-case'
                description = 'ContractCase Java DSL'
                url = 'https://case.contract-testing.io/'
                inceptionYear = '2022'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://spdx.org/licenses/BSD-3-Clause.html'
                    }
                }
                developers {
                    developer {
                        id = 'TimothyJones'
                        name = 'Timothy Jones'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/case-contract-testing/contract-case.git'
                    developerConnection = 'scm:git:ssh://github.com/case-contract-testing/contract-case.git'
                    url = 'https://github.com/case-contract-testing/contract-case'
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
        mavenLocal()
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    gitRootSearch = true
    deploy {
        maven {
            nexus2 {
                'maven-central' {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    closeRepository = true
                    releaseRepository = true
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                    applyMavenCentralRules = true

                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}